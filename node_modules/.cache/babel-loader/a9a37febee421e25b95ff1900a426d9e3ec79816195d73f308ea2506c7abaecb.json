{"ast":null,"code":"var _jsxFileName = \"/Users/yuxuan/Desktop/projects/around-web/src/components/CreatePostButton.js\";\nimport React, { Component, createRef } from \"react\";\nimport { Modal, Button, message } from \"antd\";\nimport { PostForm } from \"./PostForm\";\nimport axios from \"axios\";\nimport { BASE_URL, TOKEN_KEY } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass CreatePostButton extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      visible: false,\n      confirmLoading: false\n    };\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n    this.handleOk = () => {\n      this.setState({\n        confirmLoading: true\n      });\n\n      // get form data\n      this.postForm\n      //查看是否所有必须要填的部分有value\n      .validateFields().then(form => {\n        //从form中拿到上传的信息\n        const {\n          description,\n          uploadPost\n        } = form;\n        const {\n          type,\n          originFileObj\n        } = uploadPost[0];\n        const postType = type.match(/^(image|video)/g)[0];\n        //如果上传的类型已经被定义了\n        if (postType) {\n          //JS自带的formData的Api\n          let formData = new FormData();\n          formData.append(\"message\", description);\n          formData.append(\"media_file\", originFileObj);\n          const opt = {\n            method: \"POST\",\n            url: `${BASE_URL}/upload`,\n            headers: {\n              Authorization: `Bearer ${localStorage.getItem(TOKEN_KEY)}`\n            },\n            data: formData\n          };\n          axios(opt).then(res => {\n            if (res.status === 200) {\n              message.success(\"Successfully uploaded!\");\n              //清空form\n              this.postForm.resetFields();\n              //关闭上传界面\n              this.handleCancel();\n              //如果上传image自动转到image界面\n              this.props.onShowPost(postType);\n              //不再loading\n              this.setState({\n                confirmLoading: false\n              });\n            }\n          }).catch(err => {\n            console.log(\"Upload failed: \", err.message);\n            message.error(\"Failed to upload\");\n            this.setState({\n              confirmLoading: false\n            });\n          });\n        }\n      }).catch(err => {\n        console.log(\"err ir validate form -> \", err);\n      });\n    };\n    this.handleCancel = () => {\n      console.log(\"Clicked cancel button\");\n      this.setState({\n        visible: false\n      });\n    };\n  }\n  render() {\n    const {\n      visible,\n      confirmLoading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        onClick: this.showModal,\n        children: \"New Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        title: \"Upload a New Post\",\n        visible: visible,\n        onOk: this.handleOk,\n        okText: \"Upload\",\n        confirmLoading: confirmLoading,\n        onCancel: this.handleCancel,\n        children: /*#__PURE__*/_jsxDEV(PostForm, {\n          ref: refInstance => this.postForm = refInstance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 6\n    }, this);\n  }\n}\nexport default CreatePostButton;","map":{"version":3,"names":["React","Component","createRef","Modal","Button","message","PostForm","axios","BASE_URL","TOKEN_KEY","jsxDEV","_jsxDEV","CreatePostButton","constructor","args","state","visible","confirmLoading","showModal","setState","handleOk","postForm","validateFields","then","form","description","uploadPost","type","originFileObj","postType","match","formData","FormData","append","opt","method","url","headers","Authorization","localStorage","getItem","data","res","status","success","resetFields","handleCancel","props","onShowPost","catch","err","console","log","error","render","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","title","onOk","okText","onCancel","ref","refInstance"],"sources":["/Users/yuxuan/Desktop/projects/around-web/src/components/CreatePostButton.js"],"sourcesContent":["import React, { Component, createRef } from \"react\";\nimport { Modal, Button, message } from \"antd\";\nimport { PostForm } from \"./PostForm\";\nimport axios from \"axios\";\n\nimport { BASE_URL, TOKEN_KEY } from \"../constants\";\n\nclass CreatePostButton extends Component {\n state = {\n   visible: false,\n   confirmLoading: false\n };\n\n showModal = () => {\n   this.setState({\n     visible: true\n   });\n };\n\n handleOk = () => {\n   this.setState({\n     confirmLoading: true\n   });\n\n   // get form data\n   this.postForm\n     //查看是否所有必须要填的部分有value\n     .validateFields()\n     .then((form) => {\n        //从form中拿到上传的信息\n       const { description, uploadPost } = form;\n       const { type, originFileObj } = uploadPost[0];\n       const postType = type.match(/^(image|video)/g)[0];\n       //如果上传的类型已经被定义了\n       if (postType) {\n        //JS自带的formData的Api\n         let formData = new FormData();\n         formData.append(\"message\", description);\n         formData.append(\"media_file\", originFileObj);\n\n         const opt = {\n           method: \"POST\",\n           url: `${BASE_URL}/upload`,\n           headers: {\n             Authorization: `Bearer ${localStorage.getItem(TOKEN_KEY)}`\n           },\n           data: formData\n         };\n\n         axios(opt)\n           .then((res) => {\n             if (res.status === 200) {\n               message.success(\"Successfully uploaded!\");\n               //清空form\n               this.postForm.resetFields();\n               //关闭上传界面\n               this.handleCancel();\n               //如果上传image自动转到image界面\n               this.props.onShowPost(postType);\n               //不再loading\n               this.setState({ confirmLoading: false });\n             }\n           })\n           .catch((err) => {\n             console.log(\"Upload failed: \", err.message);\n             message.error(\"Failed to upload\");\n             this.setState({ confirmLoading: false });\n           });\n       }\n     })\n     .catch((err) => {\n       console.log(\"err ir validate form -> \", err);\n     });\n };\n\n handleCancel = () => {\n   console.log(\"Clicked cancel button\");\n   this.setState({\n     visible: false\n   });\n };\n\n render() {\n   const { visible, confirmLoading } = this.state;\n   return (\n     <div>\n       <Button type=\"primary\" onClick={this.showModal}>\n         New Post\n       </Button>\n       <Modal\n         title=\"Upload a New Post\"\n         visible={visible}\n         onOk={this.handleOk}\n         okText=\"Upload\"\n         confirmLoading={confirmLoading}\n         onCancel={this.handleCancel}\n       >\n                  <PostForm ref={(refInstance) => (this.postForm = refInstance)} />\n       </Modal>\n     </div>\n   );\n }\n}\nexport default CreatePostButton;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}